{"componentChunkName":"component---src-templates-post-template-jsx","path":"/posts/Cluster-API---Using-a-Private-Container-Registry","result":{"data":{"site":{"siteMetadata":{"title":"Blog by Sam Perrin","subtitle":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean vitae aliquam tortor, quis laoreet quam.","copyright":"© All rights reserved.","author":{"name":"Sam Perrin","twitter":"sam_perrin"},"disqusShortname":"","url":"https://vigilant-swirles-a4471c.netlify.app"}},"markdownRemark":{"id":"f0e64fa4-fede-517c-87e8-ebf041f9dec1","html":"<p>The pre-configured Cluster API Provider vSphere (CAPV) images use <code>containerd</code> as their Container Runtime, and to get this to pull images from a non-secure, or self-signed certificate container registry you need to make a few changes to the <code>/etc/containerd/config.toml</code> file.</p>\n<p>These are the steps I followed to get a private <a href=\"https://goharbor.io/\">Harbor</a> repository working over https with a self-signed certificate, that my Kubernetes clusters did not trust. </p>\n<p>If you have already deployed your workload cluster that needs to use this Private Registry, the easiest way to get this working is to manually adjust the file on each of the Kubernetes nodes, and restart the relevant service. </p>\n<p><strong>Existing Workload Cluster</strong></p>\n<p>SSH (default username is <code>capv</code> if created with CAPV) to each node in the workload cluster, and run the following (<strong>this will replace any existing content of the file</strong>).</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre style=\"counter-reset: linenumber 0\" class=\"language-shell line-numbers\"><code class=\"language-shell\"><span class=\"token function\">sudo</span> <span class=\"token function\">su</span>\n<span class=\"token function\">cat</span> <span class=\"token operator\">></span> /etc/containerd/config.toml <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">EOF\nversion = 2\n[plugins]\n  [plugins.\"io.containerd.grpc.v1.cri\"]\n    sandbox_image = \"k8s.gcr.io/pause:3.2\"\n    [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors]\n      [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors.\"acharbor01.automationcore.xtravirt.com\"]\n        endpoint = [\"https://acharbor01.automationcore.xtravirt.com\"]\n    [plugins.\"io.containerd.grpc.v1.cri\".registry.configs]\n      [plugins.\"io.containerd.grpc.v1.cri\".registry.configs.\"acharbor01.automationcore.xtravirt.com\".tls]\n        insecure_skip_verify = true\nEOF</span>\n<span class=\"token function\">sudo</span> systemctl restart containerd\n<span class=\"token function\">sudo</span> systemctl status containerd </code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>A nicer way is to add the configuration above in to your <code>cluster.yaml</code> and have it populate the <code>/etc/containerd/config.toml</code> file whenever you create another cluster with CAPV.</p>\n<p><strong>New Workload Cluster</strong></p>\n<p>Update your <code>cluster.yaml</code> to include a <code>files:</code> section, we will put it underneath, but inline, with the existing <code>preKubeadmCommands:</code> section. </p>\n<p>Replace <code>REGISTRY-FQDN</code> with the FQDN or IP address of your registry.</p>\n<p>Ensure that your endpoint has the correct protocol (http or https).</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre style=\"counter-reset: linenumber 0\" class=\"language-yaml line-numbers\"><code class=\"language-yaml\"><span class=\"token key atrule\">files</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /etc/containerd/config.toml\n    <span class=\"token key atrule\">content</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n      version = 2\n      [plugins]\n        [plugins.\"io.containerd.grpc.v1.cri\"]\n          sandbox_image = \"k8s.gcr.io/pause:3.2\"\n          [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors]\n            [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors.\"REGISTRY-FQDN\"]\n              endpoint = [\"https://REGISTRY-FQDN\"]\n          [plugins.\"io.containerd.grpc.v1.cri\".registry.configs]\n            [plugins.\"io.containerd.grpc.v1.cri\".registry.configs.\"REGISTRY-FQDN\".tls]\n              insecure_skip_verify = true</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Deploy the new cluster from your Cluster API management cluster: <code>kubectl apply -f cluster.yaml</code></p>\n<p>Once the cluster is up, you can validate that the file has the correct content by SSH’ing in to each of your clusters nodes and running:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre style=\"counter-reset: linenumber 0\" class=\"language-shell line-numbers\"><code class=\"language-shell\"><span class=\"token function\">sudo</span> <span class=\"token function\">cat</span> /etc/containerd/config.toml</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p><strong>Create Kubernetes Secret</strong></p>\n<p>Within your new workload cluster, you can now <code>docker login REGISTRY-FQDN</code>, and utilise the stored credentials to create a Kubernetes Secret that can be used within deployments to pull from your private registry. </p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre style=\"counter-reset: linenumber 0\" class=\"language-shell line-numbers\"><code class=\"language-shell\"><span class=\"token comment\">#Retrieve new workload cluster kubeconfig</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">WORKLOAD_CLUSTER_NAME</span><span class=\"token operator\">=</span><span class=\"token string\">\"&lt;CLUSTER-NAME>\"</span>\n<span class=\"token function\">mkdir</span> -p <span class=\"token environment constant\">$HOME</span>/<span class=\"token variable\">$WORKLOAD_CLUSTER_NAME</span>\nkubectl get secret <span class=\"token variable\">$WORKLOAD_CLUSTER_NAME</span>-kubeconfig -o<span class=\"token operator\">=</span>jsonpath<span class=\"token operator\">=</span><span class=\"token string\">'{.data.value}'</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span> base64 -d <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span>/dev/null <span class=\"token operator\">||</span> base64 -D<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">></span> <span class=\"token environment constant\">$HOME</span>/<span class=\"token variable\">$WORKLOAD_CLUSTER_NAME</span>/kubeconfig\n<span class=\"token comment\">#Enter a valid username/password for the registry</span>\ndocker login REGISTRY-FQDN\n<span class=\"token comment\">#Afer successful login, create a kubernetes secret based on the docker config file</span>\nkubectl create secret generic regcred --from-file<span class=\"token operator\">=</span>.dockerconfigjson<span class=\"token operator\">=</span><span class=\"token environment constant\">$HOME</span>/.docker/config.json --type<span class=\"token operator\">=</span>kubernetes.io/dockerconfigjson --kubeconfig<span class=\"token operator\">=</span><span class=\"token environment constant\">$HOME</span>/<span class=\"token variable\">$WORKLOAD_CLUSTER_NAME</span>/kubeconfig</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>Deploying from the Private Repo/Registry</strong></p>\n<p>Create a deployment using the created secret. This step assumes you have a container image available to pull from your Privary Registry.</p>\n<p>The image path could look something like this <code>harbor01.domain.com/myrepo/my-node-app:latest</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre style=\"counter-reset: linenumber 0\" class=\"language-yaml line-numbers\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> apps/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Deployment\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> node<span class=\"token punctuation\">-</span>app\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> node<span class=\"token punctuation\">-</span>app\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">replicas</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> node<span class=\"token punctuation\">-</span>app\n  <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> node<span class=\"token punctuation\">-</span>app\n    <span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> REGISTRY<span class=\"token punctuation\">-</span>FQDN/REPO/CONTAINER<span class=\"token punctuation\">:</span>TAG\n        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> node<span class=\"token punctuation\">-</span>app\n      <span class=\"token key atrule\">imagePullSecrets</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> regcred</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Validate your app has been deployed</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre style=\"counter-reset: linenumber 0\" class=\"language-shell line-numbers\"><code class=\"language-shell\">kubectl get deployment node-app --kubeconfig<span class=\"token operator\">=</span><span class=\"token environment constant\">$HOME</span>/<span class=\"token variable\">$WORKLOAD_CLUSTER_NAME</span>/kubeconfig\nkubectl get pods -l <span class=\"token assign-left variable\">app</span><span class=\"token operator\">=</span>node-app --kubeconfig<span class=\"token operator\">=</span><span class=\"token environment constant\">$HOME</span>/<span class=\"token variable\">$WORKLOAD_CLUSTER_NAME</span>/kubeconfig</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p><strong>Snippet from <code>cluster.yaml</code> including <code>files:</code></strong></p>\n<p>This is a snippet from the full <code>cluster.yaml</code> that Cluster API generates, but it shows a document that includes <code>files:</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre style=\"counter-reset: linenumber 0\" class=\"language-yaml line-numbers\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> controlplane.cluster.x<span class=\"token punctuation\">-</span>k8s.io/v1alpha3\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> KubeadmControlPlane\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> wlc01\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> default\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">infrastructureTemplate</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> infrastructure.cluster.x<span class=\"token punctuation\">-</span>k8s.io/v1alpha3\n    <span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> VSphereMachineTemplate\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> wlc01\n  <span class=\"token key atrule\">kubeadmConfigSpec</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">clusterConfiguration</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">apiServer</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">extraArgs</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">cloud-provider</span><span class=\"token punctuation\">:</span> external\n      <span class=\"token key atrule\">controllerManager</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">extraArgs</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">cloud-provider</span><span class=\"token punctuation\">:</span> external\n    <span class=\"token key atrule\">initConfiguration</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">nodeRegistration</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">criSocket</span><span class=\"token punctuation\">:</span> /var/run/containerd/containerd.sock\n        <span class=\"token key atrule\">kubeletExtraArgs</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">cloud-provider</span><span class=\"token punctuation\">:</span> external\n        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'{{ ds.meta_data.hostname }}'</span>\n    <span class=\"token key atrule\">joinConfiguration</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">nodeRegistration</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">criSocket</span><span class=\"token punctuation\">:</span> /var/run/containerd/containerd.sock\n        <span class=\"token key atrule\">kubeletExtraArgs</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">cloud-provider</span><span class=\"token punctuation\">:</span> external\n        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'{{ ds.meta_data.hostname }}'</span>\n    <span class=\"token key atrule\">preKubeadmCommands</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> hostname \"<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> ds.meta_data.hostname <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\"\n    <span class=\"token punctuation\">-</span> echo \"<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>1         ipv6<span class=\"token punctuation\">-</span>localhost ipv6<span class=\"token punctuation\">-</span>loopback\" <span class=\"token punctuation\">></span>/etc/hosts\n    <span class=\"token punctuation\">-</span> echo \"127.0.0.1   localhost\" <span class=\"token punctuation\">></span><span class=\"token punctuation\">></span>/etc/hosts\n    <span class=\"token punctuation\">-</span> echo \"127.0.0.1   <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> ds.meta_data.hostname <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\" <span class=\"token punctuation\">></span><span class=\"token punctuation\">></span>/etc/hosts\n    <span class=\"token punctuation\">-</span> echo \"<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> ds.meta_data.hostname <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\" <span class=\"token punctuation\">></span>/etc/hostname\n    <span class=\"token key atrule\">files</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /etc/containerd/config.toml\n        <span class=\"token key atrule\">content</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n          version = 2\n          [plugins]\n            [plugins.\"io.containerd.grpc.v1.cri\"]\n              sandbox_image = \"k8s.gcr.io/pause:3.2\"\n              [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors]\n                [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors.\"acharbor01.automationcore.xtravirt.com\"]\n                  endpoint = [\"https://acharbor01.automationcore.xtravirt.com\"]\n              [plugins.\"io.containerd.grpc.v1.cri\".registry.configs]\n                [plugins.\"io.containerd.grpc.v1.cri\".registry.configs.\"acharbor01.automationcore.xtravirt.com\".tls]\n                  insecure_skip_verify = true</span>\n    <span class=\"token key atrule\">useExperimentalRetryJoin</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n    <span class=\"token key atrule\">users</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> capv\n      <span class=\"token key atrule\">sshAuthorizedKeys</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> ssh<span class=\"token punctuation\">-</span>rsa OMITTED\n      <span class=\"token key atrule\">sudo</span><span class=\"token punctuation\">:</span> ALL=(ALL) NOPASSWD<span class=\"token punctuation\">:</span>ALL\n  <span class=\"token key atrule\">replicas</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n  <span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> v1.18.2</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>Other Articles in this Series</strong><br>\n<a href=\"Cluster-API-Setup-Steps--vSphere-\">Cluster API Setup Steps (vSphere)</a><br>\n<a href=\"Cluster-API-Workload-Cluster--vSphere-\">Cluster API Workload Cluster (vSphere)</a></p>","fields":{"tagSlugs":["/tags/kubernetes/","/tags/development/","/tags/vmware/"],"slug":"/posts/Cluster-API---Using-a-Private-Container-Registry"},"frontmatter":{"title":"Cluster API - Using a Private Container Registry","tags":["kubernetes","development","vmware"],"date":"2020-08-17T13:37:59.901Z","description":"Quick steps on getting a Private Container Registry working with Cluster API Provider vSphere (CAPV) images"}}},"pageContext":{"slug":"/posts/Cluster-API---Using-a-Private-Container-Registry"}}}